/* 
 *
 * Dart抽象类主要用于定义标准，子类可以继承抽象类，也可以实现抽象类接口

    1. 抽象类用abstract关键字来定义

    2. Dart中的抽象方法不能用abstract声明，Dart中没有方法体的方法我们称之为抽象方法

    3. 如果子类继承抽象类就必须实现里面的抽象方法

    4. 如果把抽象类当做接口实现的话必须实现抽象类里面定义的所有属性和方法、

    5. 抽象类不能被实例化, 只有继承他的子类可以

extends和implements的区别

    1. 如果复用抽象类里面的方法，并且要用抽象方法约束子类的话就用extends继承抽象类
    2. 如果只是把抽象类当做标准的话就用implements实现抽象类
 */


/* 
 * Dart多肽：
 *  允许将子类类型的指正赋值给父类类型的指针, 同一函数调用会有不同的执行效果 
 *  
 *  子类的实例赋值给父类引用
 * 
 *  多肽就是父类定义一个方法不去实现，让继承他的子类去实现，每个子类有不同表现
 */


abstract class Animal { // 抽象类 -- 无法直接被实例化
  eat();  // 抽象方法
  printInfo() {
    print('这里是抽象类里的普通方法');
  }
}

class Dog extends Animal {
  @override
  eat() {
    print('小狗在吃骨头');
  }
  run() {
    print('这是子类里的普通方法');
  }
}



main() {
  Animal d = new Dog(); // 子类的实例赋值给了父类引用 
  d.eat();  // 调用抽象类的抽象方法--此时无法调用run方法
  d.printInfo();  // 直接调用抽象类里的普通方法
  
}